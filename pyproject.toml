[tool.poetry]
name = "empkins-micro"
version = "0.1.0"
description = "A Python package to work with EmpkinS Micro data."
authors = ["Robert Richer <robert.richer@fau.de>", "Luca Abel <luca.abel@fau.de>"]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
biopsykit = { git = "https://github.com/mad-lab-fau/BioPsyKit.git", branch = "main", extras = ["jupyter"] }
#empkins-io = { git = "https://github.com/empkins/empkins-io.git", branch = "main" }
empkins-io = { path = "../empkins-io", develop = true }
numpy = "^1.24.3"

"pyannote.audio" = { version = "^2.1.1", optional = true }
torch = { version = "<2", optional = true }
praat-parselmouth = { version = "^0.4.3", optional = true }
webrtcvad = { version = "^2.0.10", optional = true }
pydub = { version = "^0.25.1", optional = true }
wave = { version = "^0.0.2", optional = true }
contextlib2 = { version = "^21.6.0", optional = true }
collection = { version = "^0.1.6", optional = true }

tensorflow-macos = { version = "2.10.0", optional = true, platform = "darwin" }
pywavelets = { version = "^1.4.1", optional = true }

[tool.poetry.extras]
audio = ["pyannote.audio", "praat-parselmouth", "webrtcvad", "pydub", "wave", "contextlib2", "collection", "torch"]
radar = ["tensorflow-macos", "pywavelets"]

[tool.poetry.dev-dependencies]
pytest = "^5.2"
poethepoet = "^0.10.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py38']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
skip_gitignore = true


[tool.poe.tasks]
_black = "black ."
_black_check = "black . --check"
_isort = "isort **/*.py"
_isort_check = "isort **/*.py --check-only"

# Reformat all files using black and sort import
format = { sequence = ["_black", "_isort"], help = "Format all files." }
format_check = ["_black_check", "_isort_check"]
lint = { cmd = "prospector", help = "Lint all files with Prospector." }
test = { cmd = "pytest --cov=empkins_micro --cov-report=xml", help = "Run Pytest with coverage." }
docs = { "script" = "_tasks:task_docs" }
update_version = { "script" = "_tasks:task_update_version" }
register_ipykernel = { cmd = "python -m ipykernel install --user --name empkins-micro --display-name empkins-micro", help = "Add a new jupyter kernel for the project." }
remove_ipykernel = { cmd = "jupyter kernelspec uninstall empkins-micro", help = "Remove the project specific jupyter kernel." }
default = { sequence = ["format", "lint", "test"], help = "Run the default pipeline, consisting of formatting, linting, and testing." }

